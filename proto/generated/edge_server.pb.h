// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edge_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_edge_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_edge_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_edge_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_edge_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_edge_5fserver_2eproto;
class AccessRecord;
struct AccessRecordDefaultTypeInternal;
extern AccessRecordDefaultTypeInternal _AccessRecord_default_instance_;
class CacheUpdateRequest;
struct CacheUpdateRequestDefaultTypeInternal;
extern CacheUpdateRequestDefaultTypeInternal _CacheUpdateRequest_default_instance_;
class CacheUpdateResponse;
struct CacheUpdateResponseDefaultTypeInternal;
extern CacheUpdateResponseDefaultTypeInternal _CacheUpdateResponse_default_instance_;
class SQLRequest;
struct SQLRequestDefaultTypeInternal;
extern SQLRequestDefaultTypeInternal _SQLRequest_default_instance_;
class SQLResponse;
struct SQLResponseDefaultTypeInternal;
extern SQLResponseDefaultTypeInternal _SQLResponse_default_instance_;
class StatisticsRequest;
struct StatisticsRequestDefaultTypeInternal;
extern StatisticsRequestDefaultTypeInternal _StatisticsRequest_default_instance_;
class StatisticsResponse;
struct StatisticsResponseDefaultTypeInternal;
extern StatisticsResponseDefaultTypeInternal _StatisticsResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccessRecord* Arena::CreateMaybeMessage<::AccessRecord>(Arena*);
template<> ::CacheUpdateRequest* Arena::CreateMaybeMessage<::CacheUpdateRequest>(Arena*);
template<> ::CacheUpdateResponse* Arena::CreateMaybeMessage<::CacheUpdateResponse>(Arena*);
template<> ::SQLRequest* Arena::CreateMaybeMessage<::SQLRequest>(Arena*);
template<> ::SQLResponse* Arena::CreateMaybeMessage<::SQLResponse>(Arena*);
template<> ::StatisticsRequest* Arena::CreateMaybeMessage<::StatisticsRequest>(Arena*);
template<> ::StatisticsResponse* Arena::CreateMaybeMessage<::StatisticsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SQLRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SQLRequest) */ {
 public:
  inline SQLRequest() : SQLRequest(nullptr) {}
  ~SQLRequest() override;
  explicit PROTOBUF_CONSTEXPR SQLRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SQLRequest(const SQLRequest& from);
  SQLRequest(SQLRequest&& from) noexcept
    : SQLRequest() {
    *this = ::std::move(from);
  }

  inline SQLRequest& operator=(const SQLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQLRequest& operator=(SQLRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SQLRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SQLRequest* internal_default_instance() {
    return reinterpret_cast<const SQLRequest*>(
               &_SQLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SQLRequest& a, SQLRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SQLRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQLRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SQLRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SQLRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SQLRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SQLRequest& from) {
    SQLRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SQLRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SQLRequest";
  }
  protected:
  explicit SQLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kDataSourceIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string data_source_id = 2;
  void clear_data_source_id();
  const std::string& data_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* data_source_id);
  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(const std::string& value);
  std::string* _internal_mutable_data_source_id();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SQLRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SQLResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SQLResponse) */ {
 public:
  inline SQLResponse() : SQLResponse(nullptr) {}
  ~SQLResponse() override;
  explicit PROTOBUF_CONSTEXPR SQLResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SQLResponse(const SQLResponse& from);
  SQLResponse(SQLResponse&& from) noexcept
    : SQLResponse() {
    *this = ::std::move(from);
  }

  inline SQLResponse& operator=(const SQLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQLResponse& operator=(SQLResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SQLResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SQLResponse* internal_default_instance() {
    return reinterpret_cast<const SQLResponse*>(
               &_SQLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SQLResponse& a, SQLResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SQLResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQLResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SQLResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SQLResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SQLResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SQLResponse& from) {
    SQLResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SQLResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SQLResponse";
  }
  protected:
  explicit SQLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:SQLResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatisticsRequest) */ {
 public:
  inline StatisticsRequest() : StatisticsRequest(nullptr) {}
  ~StatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR StatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticsRequest(const StatisticsRequest& from);
  StatisticsRequest(StatisticsRequest&& from) noexcept
    : StatisticsRequest() {
    *this = ::std::move(from);
  }

  inline StatisticsRequest& operator=(const StatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsRequest& operator=(StatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const StatisticsRequest*>(
               &_StatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatisticsRequest& a, StatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatisticsRequest& from) {
    StatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatisticsRequest";
  }
  protected:
  explicit StatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessRecordsFieldNumber = 1,
  };
  // repeated .AccessRecord access_records = 1;
  int access_records_size() const;
  private:
  int _internal_access_records_size() const;
  public:
  void clear_access_records();
  ::AccessRecord* mutable_access_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >*
      mutable_access_records();
  private:
  const ::AccessRecord& _internal_access_records(int index) const;
  ::AccessRecord* _internal_add_access_records();
  public:
  const ::AccessRecord& access_records(int index) const;
  ::AccessRecord* add_access_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >&
      access_records() const;

  // @@protoc_insertion_point(class_scope:StatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord > access_records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AccessRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccessRecord) */ {
 public:
  inline AccessRecord() : AccessRecord(nullptr) {}
  ~AccessRecord() override;
  explicit PROTOBUF_CONSTEXPR AccessRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessRecord(const AccessRecord& from);
  AccessRecord(AccessRecord&& from) noexcept
    : AccessRecord() {
    *this = ::std::move(from);
  }

  inline AccessRecord& operator=(const AccessRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessRecord& operator=(AccessRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessRecord* internal_default_instance() {
    return reinterpret_cast<const AccessRecord*>(
               &_AccessRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccessRecord& a, AccessRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccessRecord& from) {
    AccessRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccessRecord";
  }
  protected:
  explicit AccessRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // string data_source_id = 1;
  void clear_data_source_id();
  const std::string& data_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* data_source_id);
  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(const std::string& value);
  std::string* _internal_mutable_data_source_id();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AccessRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatisticsResponse) */ {
 public:
  inline StatisticsResponse() : StatisticsResponse(nullptr) {}
  ~StatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR StatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticsResponse(const StatisticsResponse& from);
  StatisticsResponse(StatisticsResponse&& from) noexcept
    : StatisticsResponse() {
    *this = ::std::move(from);
  }

  inline StatisticsResponse& operator=(const StatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsResponse& operator=(StatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const StatisticsResponse*>(
               &_StatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatisticsResponse& a, StatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatisticsResponse& from) {
    StatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatisticsResponse";
  }
  protected:
  explicit StatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:StatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CacheUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CacheUpdateRequest) */ {
 public:
  inline CacheUpdateRequest() : CacheUpdateRequest(nullptr) {}
  ~CacheUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR CacheUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheUpdateRequest(const CacheUpdateRequest& from);
  CacheUpdateRequest(CacheUpdateRequest&& from) noexcept
    : CacheUpdateRequest() {
    *this = ::std::move(from);
  }

  inline CacheUpdateRequest& operator=(const CacheUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheUpdateRequest& operator=(CacheUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CacheUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const CacheUpdateRequest*>(
               &_CacheUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CacheUpdateRequest& a, CacheUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CacheUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CacheUpdateRequest& from) {
    CacheUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CacheUpdateRequest";
  }
  protected:
  explicit CacheUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
  };
  // repeated string queries = 1;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  const std::string& queries(int index) const;
  std::string* mutable_queries(int index);
  void set_queries(int index, const std::string& value);
  void set_queries(int index, std::string&& value);
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  std::string* add_queries();
  void add_queries(const std::string& value);
  void add_queries(std::string&& value);
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& queries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_queries();
  private:
  const std::string& _internal_queries(int index) const;
  std::string* _internal_add_queries();
  public:

  // @@protoc_insertion_point(class_scope:CacheUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> queries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CacheUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CacheUpdateResponse) */ {
 public:
  inline CacheUpdateResponse() : CacheUpdateResponse(nullptr) {}
  ~CacheUpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR CacheUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheUpdateResponse(const CacheUpdateResponse& from);
  CacheUpdateResponse(CacheUpdateResponse&& from) noexcept
    : CacheUpdateResponse() {
    *this = ::std::move(from);
  }

  inline CacheUpdateResponse& operator=(const CacheUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheUpdateResponse& operator=(CacheUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CacheUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const CacheUpdateResponse*>(
               &_CacheUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CacheUpdateResponse& a, CacheUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CacheUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CacheUpdateResponse& from) {
    CacheUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CacheUpdateResponse";
  }
  protected:
  explicit CacheUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:CacheUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edge_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SQLRequest

// string query = 1;
inline void SQLRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SQLRequest::query() const {
  // @@protoc_insertion_point(field_get:SQLRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SQLRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SQLRequest.query)
}
inline std::string* SQLRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:SQLRequest.query)
  return _s;
}
inline const std::string& SQLRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SQLRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SQLRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SQLRequest::release_query() {
  // @@protoc_insertion_point(field_release:SQLRequest.query)
  return _impl_.query_.Release();
}
inline void SQLRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SQLRequest.query)
}

// string data_source_id = 2;
inline void SQLRequest::clear_data_source_id() {
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& SQLRequest::data_source_id() const {
  // @@protoc_insertion_point(field_get:SQLRequest.data_source_id)
  return _internal_data_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SQLRequest::set_data_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SQLRequest.data_source_id)
}
inline std::string* SQLRequest::mutable_data_source_id() {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:SQLRequest.data_source_id)
  return _s;
}
inline const std::string& SQLRequest::_internal_data_source_id() const {
  return _impl_.data_source_id_.Get();
}
inline void SQLRequest::_internal_set_data_source_id(const std::string& value) {
  
  _impl_.data_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SQLRequest::_internal_mutable_data_source_id() {
  
  return _impl_.data_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SQLRequest::release_data_source_id() {
  // @@protoc_insertion_point(field_release:SQLRequest.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void SQLRequest::set_allocated_data_source_id(std::string* data_source_id) {
  if (data_source_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_id_.SetAllocated(data_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SQLRequest.data_source_id)
}

// int64 timestamp = 3;
inline void SQLRequest::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t SQLRequest::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t SQLRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:SQLRequest.timestamp)
  return _internal_timestamp();
}
inline void SQLRequest::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void SQLRequest::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SQLRequest.timestamp)
}

// -------------------------------------------------------------------

// SQLResponse

// string result = 1;
inline void SQLResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& SQLResponse::result() const {
  // @@protoc_insertion_point(field_get:SQLResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SQLResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SQLResponse.result)
}
inline std::string* SQLResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:SQLResponse.result)
  return _s;
}
inline const std::string& SQLResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void SQLResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* SQLResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* SQLResponse::release_result() {
  // @@protoc_insertion_point(field_release:SQLResponse.result)
  return _impl_.result_.Release();
}
inline void SQLResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SQLResponse.result)
}

// -------------------------------------------------------------------

// StatisticsRequest

// repeated .AccessRecord access_records = 1;
inline int StatisticsRequest::_internal_access_records_size() const {
  return _impl_.access_records_.size();
}
inline int StatisticsRequest::access_records_size() const {
  return _internal_access_records_size();
}
inline void StatisticsRequest::clear_access_records() {
  _impl_.access_records_.Clear();
}
inline ::AccessRecord* StatisticsRequest::mutable_access_records(int index) {
  // @@protoc_insertion_point(field_mutable:StatisticsRequest.access_records)
  return _impl_.access_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >*
StatisticsRequest::mutable_access_records() {
  // @@protoc_insertion_point(field_mutable_list:StatisticsRequest.access_records)
  return &_impl_.access_records_;
}
inline const ::AccessRecord& StatisticsRequest::_internal_access_records(int index) const {
  return _impl_.access_records_.Get(index);
}
inline const ::AccessRecord& StatisticsRequest::access_records(int index) const {
  // @@protoc_insertion_point(field_get:StatisticsRequest.access_records)
  return _internal_access_records(index);
}
inline ::AccessRecord* StatisticsRequest::_internal_add_access_records() {
  return _impl_.access_records_.Add();
}
inline ::AccessRecord* StatisticsRequest::add_access_records() {
  ::AccessRecord* _add = _internal_add_access_records();
  // @@protoc_insertion_point(field_add:StatisticsRequest.access_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >&
StatisticsRequest::access_records() const {
  // @@protoc_insertion_point(field_list:StatisticsRequest.access_records)
  return _impl_.access_records_;
}

// -------------------------------------------------------------------

// AccessRecord

// string data_source_id = 1;
inline void AccessRecord::clear_data_source_id() {
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& AccessRecord::data_source_id() const {
  // @@protoc_insertion_point(field_get:AccessRecord.data_source_id)
  return _internal_data_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessRecord::set_data_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccessRecord.data_source_id)
}
inline std::string* AccessRecord::mutable_data_source_id() {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:AccessRecord.data_source_id)
  return _s;
}
inline const std::string& AccessRecord::_internal_data_source_id() const {
  return _impl_.data_source_id_.Get();
}
inline void AccessRecord::_internal_set_data_source_id(const std::string& value) {
  
  _impl_.data_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccessRecord::_internal_mutable_data_source_id() {
  
  return _impl_.data_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AccessRecord::release_data_source_id() {
  // @@protoc_insertion_point(field_release:AccessRecord.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void AccessRecord::set_allocated_data_source_id(std::string* data_source_id) {
  if (data_source_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_id_.SetAllocated(data_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccessRecord.data_source_id)
}

// int64 timestamp = 2;
inline void AccessRecord::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t AccessRecord::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t AccessRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:AccessRecord.timestamp)
  return _internal_timestamp();
}
inline void AccessRecord::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void AccessRecord::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:AccessRecord.timestamp)
}

// -------------------------------------------------------------------

// StatisticsResponse

// string status = 1;
inline void StatisticsResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& StatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:StatisticsResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatisticsResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StatisticsResponse.status)
}
inline std::string* StatisticsResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:StatisticsResponse.status)
  return _s;
}
inline const std::string& StatisticsResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void StatisticsResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* StatisticsResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* StatisticsResponse::release_status() {
  // @@protoc_insertion_point(field_release:StatisticsResponse.status)
  return _impl_.status_.Release();
}
inline void StatisticsResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StatisticsResponse.status)
}

// -------------------------------------------------------------------

// CacheUpdateRequest

// repeated string queries = 1;
inline int CacheUpdateRequest::_internal_queries_size() const {
  return _impl_.queries_.size();
}
inline int CacheUpdateRequest::queries_size() const {
  return _internal_queries_size();
}
inline void CacheUpdateRequest::clear_queries() {
  _impl_.queries_.Clear();
}
inline std::string* CacheUpdateRequest::add_queries() {
  std::string* _s = _internal_add_queries();
  // @@protoc_insertion_point(field_add_mutable:CacheUpdateRequest.queries)
  return _s;
}
inline const std::string& CacheUpdateRequest::_internal_queries(int index) const {
  return _impl_.queries_.Get(index);
}
inline const std::string& CacheUpdateRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:CacheUpdateRequest.queries)
  return _internal_queries(index);
}
inline std::string* CacheUpdateRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:CacheUpdateRequest.queries)
  return _impl_.queries_.Mutable(index);
}
inline void CacheUpdateRequest::set_queries(int index, const std::string& value) {
  _impl_.queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::set_queries(int index, std::string&& value) {
  _impl_.queries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::set_queries(int index, const char* value, size_t size) {
  _impl_.queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CacheUpdateRequest.queries)
}
inline std::string* CacheUpdateRequest::_internal_add_queries() {
  return _impl_.queries_.Add();
}
inline void CacheUpdateRequest::add_queries(const std::string& value) {
  _impl_.queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::add_queries(std::string&& value) {
  _impl_.queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::add_queries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CacheUpdateRequest.queries)
}
inline void CacheUpdateRequest::add_queries(const char* value, size_t size) {
  _impl_.queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CacheUpdateRequest.queries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CacheUpdateRequest::queries() const {
  // @@protoc_insertion_point(field_list:CacheUpdateRequest.queries)
  return _impl_.queries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CacheUpdateRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:CacheUpdateRequest.queries)
  return &_impl_.queries_;
}

// -------------------------------------------------------------------

// CacheUpdateResponse

// string status = 1;
inline void CacheUpdateResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& CacheUpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:CacheUpdateResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheUpdateResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CacheUpdateResponse.status)
}
inline std::string* CacheUpdateResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:CacheUpdateResponse.status)
  return _s;
}
inline const std::string& CacheUpdateResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void CacheUpdateResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheUpdateResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheUpdateResponse::release_status() {
  // @@protoc_insertion_point(field_release:CacheUpdateResponse.status)
  return _impl_.status_.Release();
}
inline void CacheUpdateResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CacheUpdateResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_edge_5fserver_2eproto
