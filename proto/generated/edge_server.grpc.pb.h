// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: edge_server.proto
#ifndef GRPC_edge_5fserver_2eproto__INCLUDED
#define GRPC_edge_5fserver_2eproto__INCLUDED

#include "edge_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class EdgeServer final {
 public:
  static constexpr char const* service_full_name() {
    return "EdgeServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 用户通过此接口查询数据
    virtual ::grpc::Status ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::SQLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>> AsyncExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>>(AsyncExecuteSQLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>> PrepareAsyncExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>>(PrepareAsyncExecuteSQLRaw(context, request, cq));
    }
    // 边缘服务器定期上报请求统计
    virtual ::grpc::Status ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::StatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>> AsyncReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>>(AsyncReportStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>> PrepareAsyncReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>>(PrepareAsyncReportStatisticsRaw(context, request, cq));
    }
    // 中心服务器向边缘服务器下发缓存任务
    virtual ::grpc::Status UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::CacheUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>> AsyncUpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>>(AsyncUpdateCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>> PrepareAsyncUpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>>(PrepareAsyncUpdateCacheRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 用户通过此接口查询数据
      virtual void ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest* request, ::SQLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest* request, ::SQLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 边缘服务器定期上报请求统计
      virtual void ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 中心服务器向边缘服务器下发缓存任务
      virtual void UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>* AsyncExecuteSQLRaw(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SQLResponse>* PrepareAsyncExecuteSQLRaw(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>* AsyncReportStatisticsRaw(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StatisticsResponse>* PrepareAsyncReportStatisticsRaw(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>* AsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CacheUpdateResponse>* PrepareAsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::SQLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SQLResponse>> AsyncExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SQLResponse>>(AsyncExecuteSQLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SQLResponse>> PrepareAsyncExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SQLResponse>>(PrepareAsyncExecuteSQLRaw(context, request, cq));
    }
    ::grpc::Status ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::StatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>> AsyncReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>>(AsyncReportStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>> PrepareAsyncReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>>(PrepareAsyncReportStatisticsRaw(context, request, cq));
    }
    ::grpc::Status UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::CacheUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>> AsyncUpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>>(AsyncUpdateCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>> PrepareAsyncUpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>>(PrepareAsyncUpdateCacheRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest* request, ::SQLResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteSQL(::grpc::ClientContext* context, const ::SQLRequest* request, ::SQLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportStatistics(::grpc::ClientContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateCache(::grpc::ClientContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SQLResponse>* AsyncExecuteSQLRaw(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SQLResponse>* PrepareAsyncExecuteSQLRaw(::grpc::ClientContext* context, const ::SQLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>* AsyncReportStatisticsRaw(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StatisticsResponse>* PrepareAsyncReportStatisticsRaw(::grpc::ClientContext* context, const ::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>* AsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CacheUpdateResponse>* PrepareAsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::CacheUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteSQL_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCache_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 用户通过此接口查询数据
    virtual ::grpc::Status ExecuteSQL(::grpc::ServerContext* context, const ::SQLRequest* request, ::SQLResponse* response);
    // 边缘服务器定期上报请求统计
    virtual ::grpc::Status ReportStatistics(::grpc::ServerContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response);
    // 中心服务器向边缘服务器下发缓存任务
    virtual ::grpc::Status UpdateCache(::grpc::ServerContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteSQL(::grpc::ServerContext* context, ::SQLRequest* request, ::grpc::ServerAsyncResponseWriter< ::SQLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportStatistics(::grpc::ServerContext* context, ::StatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::StatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCache() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCache(::grpc::ServerContext* context, ::CacheUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::CacheUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteSQL<WithAsyncMethod_ReportStatistics<WithAsyncMethod_UpdateCache<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::SQLRequest, ::SQLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SQLRequest* request, ::SQLResponse* response) { return this->ExecuteSQL(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteSQL(
        ::grpc::MessageAllocator< ::SQLRequest, ::SQLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SQLRequest, ::SQLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteSQL(
      ::grpc::CallbackServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StatisticsRequest, ::StatisticsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StatisticsRequest* request, ::StatisticsResponse* response) { return this->ReportStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_ReportStatistics(
        ::grpc::MessageAllocator< ::StatisticsRequest, ::StatisticsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StatisticsRequest, ::StatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCache() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CacheUpdateRequest, ::CacheUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CacheUpdateRequest* request, ::CacheUpdateResponse* response) { return this->UpdateCache(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCache(
        ::grpc::MessageAllocator< ::CacheUpdateRequest, ::CacheUpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CacheUpdateRequest, ::CacheUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCache(
      ::grpc::CallbackServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteSQL<WithCallbackMethod_ReportStatistics<WithCallbackMethod_UpdateCache<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCache() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteSQL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCache() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteSQL(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteSQL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportStatistics(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCache() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCache(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteSQL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteSQL() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SQLRequest, ::SQLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SQLRequest, ::SQLResponse>* streamer) {
                       return this->StreamedExecuteSQL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteSQL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteSQL(::grpc::ServerContext* /*context*/, const ::SQLRequest* /*request*/, ::SQLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteSQL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SQLRequest,::SQLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportStatistics() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StatisticsRequest, ::StatisticsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StatisticsRequest, ::StatisticsResponse>* streamer) {
                       return this->StreamedReportStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportStatistics(::grpc::ServerContext* /*context*/, const ::StatisticsRequest* /*request*/, ::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StatisticsRequest,::StatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCache() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CacheUpdateRequest, ::CacheUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CacheUpdateRequest, ::CacheUpdateResponse>* streamer) {
                       return this->StreamedUpdateCache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCache(::grpc::ServerContext* /*context*/, const ::CacheUpdateRequest* /*request*/, ::CacheUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CacheUpdateRequest,::CacheUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteSQL<WithStreamedUnaryMethod_ReportStatistics<WithStreamedUnaryMethod_UpdateCache<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteSQL<WithStreamedUnaryMethod_ReportStatistics<WithStreamedUnaryMethod_UpdateCache<Service > > > StreamedService;
};


#endif  // GRPC_edge_5fserver_2eproto__INCLUDED
