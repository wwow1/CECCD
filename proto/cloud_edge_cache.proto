syntax = "proto3";

package cloud_edge_cache;

// Metadata message for data keys
message StreamMetadata {
    string datastream_id = 1;
    uint32 unique_id = 2;
    uint64 start_time = 3;
    uint32 time_range = 4;
    repeated uint32 block_ids = 5;
}

// Empty message for responses
message Empty {}

// Block access statistics
message BlockAccessInfo {
    uint32 datastream_unique_id = 1;         // ID of the data block
    uint32 block_id = 2;    // Unique ID of the datastream this block belongs to
    double selectivity = 3;      // Selectivity ratio of this block
}

// Statistics report message
message StatisticsReport {
    string server_address = 1;
    repeated BlockAccessInfo block_stats = 2;
}

// Cache update message
message UpdateCacheMeta {
    string src_node_addr = 1;
    repeated StreamMetadata stream_metadata = 2;
    repeated BlockOperationInfo block_operations = 3;  // 添加块操作信息
}

// Query request and response
message QueryRequest {
    string sql_query = 1; // SQL query string
}

// Row represents a single row of data
message Row {
    repeated string values = 1;  // Values in string format
}

// Column metadata
message Column {
    string name = 1;
    string type = 2;
}

// Query response with structured result
message QueryResponse {
    repeated Column columns = 1;  // Column metadata
    repeated Row rows = 2;        // Result rows
    string error = 3;            // Error message if query fails
}

// 新增：网络度量服务相关消息
message NetworkMetricsRequest {
    string data = 1;        // 测试数据
    string from_node = 2;   // 发送方节点
}

message NetworkMetricsResponse {
    bool success = 1;
}

// 新增：网络度量服务
service NetworkMetricsService {
    rpc MeasureNetwork(NetworkMetricsRequest) returns (NetworkMetricsResponse);
}

// APIs for the client to interact with the edge server
service ClientToEdge {
    rpc Query(QueryRequest) returns (QueryResponse);
}

// APIs for edge-to-edge metadata updates
service EdgeToEdge {
    rpc UpdateMetadata(UpdateCacheMeta) returns (Empty);
    rpc SubQuery(QueryRequest) returns (SubQueryResponse);
}

// APIs for edge-to-center communication
service EdgeToCenter {
    rpc Register(RegisterRequest) returns (Empty);
    rpc ReportStatistics(StatisticsReport) returns (Empty);
}

// APIs for center-to-edge communication
service CenterToEdge {
    rpc UpdateClusterNodes(ClusterNodesUpdate) returns (Empty);
    rpc ReplaceCache(CacheReplacement) returns (Empty);
}

enum BlockOperation {
    ADD = 0;
    REMOVE = 1;
}

message BlockOperationInfo {
    uint32 datastream_unique_id = 1;  // 添加数据流唯一标识
    uint32 block_id = 2;              // 块ID
    BlockOperation operation = 3;      // 操作类型
}

message CacheReplacement {
    repeated BlockOperationInfo block_operations = 1;
    repeated StreamMetadata stream_metadata = 2;  // 添加相关的流元数据
}

// 添加新的消息类型
message SubQueryResponse {
    enum Status {
        OK = 0;
        FALSE_POSITIVE = 1;  // 表示布隆过滤器假阳性
        ERROR = 2;          // 其他错误
    }
    Status status = 1;
    QueryResponse result = 2;
    string error_message = 3;
}

// 添加新的消息类型
message RegisterRequest {
    string node_address = 1;
}

message NodeInfo {
    string node_address = 1;
}

message ClusterNodesUpdate {
    repeated NodeInfo nodes = 1;
}